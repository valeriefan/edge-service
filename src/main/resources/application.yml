server:
  port: 9000
  netty:
    connection-timeout: 2s
    idle-timeout: 15s
  shutdown: graceful

spring:
  application:
    name: edge-service
  config:
    import: ""
  lifecycle:
    timeout-per-shutdown-phase: 15s
  cloud:
    config:
      enabled: false # Enable spring cloud config: true
      uri: http://localhost:8888
      request-connect-timeout: 5000 # 5s
      request-read-timeout: 5000 # 5s
      fail-fast: false # In production, set to true
      retry:
        max-attempts: 6
        initial-interval: 1000 # 1s
        max-interval: 2000 # 2s
        multiplier: 1.1
    gateway:
      routes:
        - id: spa-route
          uri: ${SPA_URL:http://localhost:9004}
          predicates:
            - Path=/,/*.css,/*.js,/favicon.ico
        - id: catalog-route
          uri: ${CATALOG_SERVICE_URL:http://localhost:9001}/houses
          predicates:
            - Path=/houses/**
          filters:
            - name: CircuitBreaker
              args:
                name: catalogCircuitBreaker
                fallbackUri: forward:/catalog-fallback
        - id: booking-route
          uri: ${BOOKING_SERVICE_URL:http://localhost:9002}/bookings
          predicates:
            - Path=/bookings/**
          filters:
            - name: CircuitBreaker
              args:
                name: bookingCircuitBreaker
      httpclient:
        connect-timeout: 5000
        response-timeout: 5s
        pool:
          type: elastic
          max-idle-time: 15s
          max-life-time: 60s
      default-filters:
        - name: Retry
          args:
            retries: 3
            methods: GET
            series: SERVER_ERROR
            exceptions: java.io.IOException, java.util.concurrent.TimeoutException
            backoff:
              firstBackoff: 50ms
              maxBackOff: 500ms
              factor: 2
              basedOnPreviousValue: false
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
              requestedTokens: 1
        - SaveSession
        - TokenRelay
  session:
    timeout: 10m
    redis:
      namespace: rentsphere:edge
  data:
    redis:
      connect-timeout: 2s
      host: localhost  # docker: localhost, k8s: rentsphere-redis
      port: 6379
      timeout: 5s
      lettuce:
        pool:
          max-active: 20
          max-wait: -1ms
          max-idle: 10
          min-idle: 2
        cluster:
          refresh:
            adaptive: true
            period: 20
  security:
    oauth2:
      client:
        registration:
          keycloak:
            authorization-grant-type: authorization_code
            client-id: edge-service
            client-secret: rentsphere-keycloak-secret
            provider: keycloak
            scope: openid, roles
        provider:
          keycloak:
            issuer-uri: http://localhost:8080/realms/RentSphere

resilience4j:
  circuitbreaker:
    configs:
      default:
        slidingWindowSize: 20
        permittedNumberOfCallsInHalfOpenState: 5
        failureRateThreshold: 50
        waitDurationInOpenState: 15000
  timelimiter:
    configs:
      default:
        timeoutDuration: 5s

logging:
  group:
    circuitbreaker: io.github.resilience4j, org.springframework.cloud.circuitbreaker
  level:
    circuitbreaker: info
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"

management:
  endpoints:
    web:
      exposure:
        include: configprops, env, flyway, health, heapdump, info, loggers, mappings, prometheus
  endpoint:
    health:
      show-details: always
      show-components: always
      probes:
        enabled: true
  metrics:
    tags:
      application: ${spring.application.name}
  info:
    env:
      enabled: true
    java:
      enabled: true
    os:
      enabled: true

info:
  system: RentSphere